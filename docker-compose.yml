version: '3'

services:
  mongo:
    container_name: mongo
    image: mongo:5
    ports: 
      - "27017:27017"
    restart: always
    command: ["--replSet", "mongo", "--bind_ip_all", "--port", "27017"]
    volumes:
      - mongodb:/data/db
    healthcheck:
      test: |
        mongosh --quiet --eval "try { rs.status() } catch (err) { rs.initiate({_id: 'mongo', members: [{_id: 0, host: 'localhost:27017', priority:1}) }"
      interval: 10s
      timeout: 30s
      retries: 5

  mysql:
    container_name: mysql
    image: mysql
    platform: linux/x86_64
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USERNAME: root
      MYSQL_PASSWORD: root
    ports: 
      - "3306:3306"
    restart: always
    volumes:
      - mysql:/var/lib/mysql

  posgresql:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports: 
      - "5432:5432"
    restart: always
    volumes:
      - postgres:/var/lib/postgresql/data

  redis:
    container_name: redis
    image: redis
    ports: 
      - "6379:6379"
    restart: always
    volumes:
      - redis:/data

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management-alpine
    ports: 
      - "5672:5672" 
      - "15672:15672"
    restart: always
    volumes:
      - rabbitmq:/var/lib/rabbitmq
      - rabbitmq_log:/var/log/rabbitmq

  mariadb:
    container_name: mariadb
    image: mariadb
    platform: linux/x86_64
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USERNAME: root
      MYSQL_PASSWORD: root
    ports: 
      - "3307:3306"
    restart: always
    volumes:
      - mariadb:/var/lib/mysql

  proxysql:
    container_name: proxysql
    image: proxysql/proxysql:2.0.15
    volumes:
      - ./proxysql.cnf:/etc/proxysql.cnf
    ports:
      - "6032:6032"
      - "6033:6033"
    restart: always
    depends_on:
      - mariadb

  minio:
    container_name: minio
    image: minio/minio
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - 'minio:/data'
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=miniominio
    restart: always
    platform: linux/x86_64
    command: server /data --console-address ":9001"

  nsqlookupd:
    container_name: nsqlookupd
    image: nsqio/nsq:v1.2.0 # Menggunakan versi 1.2.0
    command: /nsqlookupd --http-address=0.0.0.0:4160 --tcp-address=0.0.0.0:4161 # Explicitly bind to all interfaces
    ports:
      - "4160:4160"
      - "4161:4161"
    restart: always
    volumes:
      - nsqlookupd_data:/data

  nsqd:
    container_name: nsqd
    image: nsqio/nsq:v1.2.0 # Menggunakan versi 1.2.0
    command: /nsqd --lookupd-tcp-address=nsqlookupd:4161 --data-path=/data --http-address=0.0.0.0:4151 --tcp-address=0.0.0.0:4150 # Explicitly bind
    ports:
      - "4150:4150"
      - "4151:4151"
    restart: always
    volumes:
      - nsqd_data:/data
    depends_on:
      - nsqlookupd

  nsqadmin:
    container_name: nsqadmin
    image: nsqio/nsq:v1.2.0 # Menggunakan versi 1.2.0
    command: /nsqadmin --lookupd-http-address=nsqlookupd:4160
    ports:
      - "4171:4171"
    restart: always
    depends_on:
      - nsqlookupd

volumes:
  mongodb:
  mongodb_replica_2:
  mysql:
  mariadb:
  postgres:
  redis:
  rabbitmq:
  rabbitmq_log:
  minio:
  nsqlookupd_data:
  nsqd_data:
